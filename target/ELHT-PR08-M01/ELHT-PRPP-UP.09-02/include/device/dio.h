/**
 * \file device/dio.h
 * \brief Дискретные входы и выходы устройств
 */

#pragma once

#include <cstdint>

namespace device
{
  //! Псевдоним типа дискретных входов
  using dinputs_t = uint32_t;
  //! Псевдоним типа дискретных выходов
  using doutputs_t = uint32_t;


  //! Структура состояний дискретных входов
  struct DInputsGroupStates
  {
    //! Маска текущего состояния входов
    dinputs_t current_state{};
    //! Маска флагов переднего фронта входов
    dinputs_t front_state{};
    //! Маска флагов заднего фронта входов
    dinputs_t back_state{};
    //! Флаг выдержки состояния входов
    bool delay_passed{false};
  };

  /**
   * \brief Группа дискретных входов
   * \details
   * Поддерживает до 32 входов в группе
   * 
   * Отслеживает:
   * - Текущее состояние входов
   * - Переключение входов по переднему фронту
   * - Переключение входов по заднему фронту
   * - Выдержка времени установившегося состояния группы входов
   */
  class DInputsGroup
  {
  private:
    //! Маска нормально закрытых входов
    const dinputs_t _nc_inputs;

    //! Маска текущего состояния входов
    dinputs_t _current_state{};
    //! Маска последнего поданного состояния на входы
    dinputs_t _last_state{};
    //! Маска флагов переднего фронта входов
    dinputs_t _front_state{};
    //! Маска флагов заднего фронта входов
    dinputs_t _back_state{};
    //! Время последней записи состояния входов
    uint32_t  _last_update_time{};
    //! Флаг выдержки состояния входов
    bool _delay_passed{false};
    //! Кол-во входов
    uint8_t _size;

    //! Время последнего изменения состояний входов в тактах времени ОС
    uint32_t _last_change_tick{};
    //! Время выдержки флага выдержки состояния входов в тактах времени ОС
    uint32_t _delay_tick;

  public:
    /**
     * \brief Конструктор группы дискретных входов
     * \param inputs Битовая маска входов
     * \param nc_inputs Битовая маска нормально-закрытых входов
     * \param delay_tick Выдержка времени входов в тиках операционной системы
    */
    constexpr DInputsGroup(
      const uint8_t size,
      const dinputs_t nc_inputs=0,
      const uint32_t delay_tick=1000
    )
    : _nc_inputs{nc_inputs},
      _size{(size <= 32) ? size : static_cast<uint8_t>(32)},
      _delay_tick{delay_tick}
    {
    }

    /**
     * \brief Устанавливает состояния всей группы входов
     * \param new_state Устанавливаемые состояния входов (без учета
     * НЗ-контактов)
     * \param force Принудительная установка входов без защиты от дребезга
     * \details
     * Инвертирует подаваемые значения согласно переменной \ref _nc_inputs
     * 
     * Имеет защиту от дребезга - для изменения состояния входа его
     * устанавливаемое значение должно повториться два раза. Время между
     * вызовами метода должно быть не меньше ожидаемого времени дребезга.  
     * Для отключения защиты от дребезга можно использовать аргумент force.
     * 
     * Метод также отслеживает изменения входов по переднему и заднему фронтам
     * и сбрасывает таймер выдержки времени при изменениях состояния группы
     */
    void setInputs(dinputs_t bitmask, bool force=false);

    /**
     * \brief Устанавливает время выдержки установившегося состояния входов
     * \param tick Время выдержки в тактах операционной системы
    */
    void setDelay(uint32_t tick);

    /**
     * \brief Устанавливает кол-во входов в группе
     * \param new_size Кол-во входов (Не более 32)
     */
    void setSize(uint8_t new_size);

    /**
     * \brief Устанавливает время обновления входов
     * \param time Время обновления входов
     * \details
     * Вызывается вручную после считывания нового состояния входов
     */
    void setLastUpdateTime(uint32_t time);

    /**
     * \brief Возвращает структуру состояний дискретных входов
     * \details
     * Вызывает все прочие функции считывания состояний дискретных входов разом.
     * Соответственно, сбрасывает все флаги, которые сбрасывают остальные 
     * методы по отдельности
     */
    const DInputsGroupStates getStates();

    /**
     * \brief Возвращает текущее состояние входов
     */
    dinputs_t getInputs() const;

    /**
     * \brief Возвращает и стирает маску переднего фронта входов
     */
    dinputs_t getFrontInputs();

    /**
     * \brief Возвращает и стирает маску заднего фронта входов
     */
    dinputs_t getBackInputs();

    /**
     * \brief Возвращает битовую маску общего количества входов
     */
    dinputs_t getBitmask() const;

    /**
     * \brief Проверяет прошло ли время выдержки с момента последнего изменения
     * входов
     * \details
     * Флаг времени выдержки считывается только один раз при первом вызове 
     * метода, если прошло время выдержки.
     * 
     * \retval true если с момента изменения входов прошло не менее времени 
     * выдержки
     * \retval false если время выдержки не прошло, или флаг true уже был 
     * прочитан ранее
     */
    bool getDelayState();

    /**
     * \brief Возвращает время последнего обновления состояния входов
     * \details
     * Время должно задаваться методом \ref setLastUpdateTime()
     */
    uint32_t getLastUpdateTime() const;

    /**
     * \brief Возвращает кол-во входов
     */
    uint8_t size() const;
  };


  /**
   * \brief Группа дискретных выходов
   * \details
   * Поддерживает до 32 дискретных выходов
   * 
   * Позволяет назначить части выходов из группы безопасное состояние
   */
  class DOutputsGroup
  {
  private:
    //! Маска нормально закрытых выходов
    const doutputs_t _nc_outputs;

    //! Кол-во выходов
    uint8_t _size;

    //! Текущее состояние выходов
    doutputs_t _current_state{};

    //! Время последней записи выходов
    uint32_t _last_update_time{};

  public:
    /**
     * \brief Конструктор группы дискретных выходов
     * \param size Кол-во выходов
     * \param nc_outputs Битовая маска нормально-закрытых выходов
     */
    constexpr DOutputsGroup(const uint8_t size, const doutputs_t nc_outputs={})
    : _nc_outputs{nc_outputs},
      _size{(size <= 32) ? size : static_cast<uint8_t>(32)}
    {
    }

    /**
     * \brief Устанавливает состояние выходов
     * \param outputs Битовая маска нового состояния выходов
     * \details
     * Если включено безопасное состояние выходов, то задействованные
     * в безопасном остоянии выходы будут перезаписаны значениями из маски
     * безопасного состояния 
     */
    void setOutputs(doutputs_t outputs);

    /**
     * \brief Устанавливает и сбрасывает указанные маски выходов
     * \param set Устанавливаемые выходы
     * \param reset Сбрасываемые выходы
     * \details
     * Сбрасываемые выходы имеют приоритет над устанвливаемыми в случае
     * совпадения значений
     */
    void setOutputsBits(doutputs_t set, doutputs_t reset);

    /**
     * \brief Устанавливает кол-во выходов в группе
     * \param new_size Кол-во выходов (Не более 32)
     */
    void setSize(uint8_t new_size);

    /**
     * \brief Устанавливает время записи выходов
     * \param time Время записи выходов
     * \details
     * Вызывается вручную после записи нового состояния выходов в целевом
     * устройстве
     */
    void setLastUpdateTime(uint32_t time);

    /**
     * \brief Возвращает битовую маску состояния выходов
     * \details
     * \note Метод не учитывает маску НЗ-выходов \ref _nc_outputs. При установке
     * значения выводов необходимо использовать текущий метод вместе с методом 
     * \ref getNcBitmask()
     */
    doutputs_t getOutputs() const;

    /**
     * \brief Возвращает битовую маску нормально-закрытых выходов
     */
    doutputs_t getNcBitmask() const;

    /**
     * \brief Возвращает битовую маску общего количества выходов
     */
    doutputs_t getBitmask() const;

    /**
     * \brief Возвращает время последнего обновления записи выходов
     * \details
     * Время должно задаваться методом \ref getLastUpdateTime()
     */
    uint32_t getLastUpdateTime() const;

    /**
     * \brief Возвращает кол-во выходов
     */
    uint8_t size() const;
  };
}