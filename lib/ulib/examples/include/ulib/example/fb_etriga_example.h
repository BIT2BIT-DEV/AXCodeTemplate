/**
 * \file ulib/example/fb_etrig_example.h
 * \brief Пример создания функционального блока типа Execute с входом abort
 * на основе класса \ref ETrigA
 */

#include "plc/fb_base.h"


namespace plc::example
{
  /**
   * \brief Пример создания функционального блока ETrigA
   * \details
   * Блок выполняется за два цикла и выполняет следующие действия:
   * - Устанавливает выходной параметр output_a() на противоположное
   * значение входного параметра input_a
   * - Устанавливает значение выходного параметра output_b() на 1 больше чем
   * входной параметр input_b
   * - Перейдет в состояние ошибки, если input_b будет больше или равен 100.
   * - Выводит в терминал отладки сообщения о текущем состоянии блока
   * - Если сбросить блок с помощью входа \ref abort до окончания выполнения,
   * выходы не изменят свое состояние
   * - Изменение входных параметров после запуска блока не повлияет на выходные
   * параметры, т.к. входные параметры копируются внутрь блока
   * 
   * Блок запускается при установке входного параметра \ref execute = true и
   * вызова метода выполнения блок \ref operator()()
   * (в коде - "название_переменной_блока();")
   * 
   * Для блока не нужно указывать стандартные входные и выходные параметры 
   * блоков типа \ref ETrigA, данные параметры и работа с ними по умолчанию 
   * входят в класс.
   * 
   * Для реализации пользовательской логики блока достаточно добавить в класс
   * и реализовать метод \ref processExecuting(). Метод автоматически 
   * вызывается в состоянии \ref plc::FB_STATE::EXECUTING при каждом выполнении 
   * блока, пока не перейдет в другое состояние.
   * 
   * Дополнительно можно реализовать методы:
   * - \ref processResetting() - выполняется в состоянии 
   * \ref plc::FB_STATE::RESETTING.
   * - \ref processAborting() - выполняется в состоянии 
   * \ref plc::FB_STATE::ABORTING
   * 
   * Оба метода могут потребоваться для сброса пользовательских переменных или
   * остановки пользовательских процессов. Стандартные входные и выходные
   * параметры блока сбрасываются автоматически.
   * 
   * В каждом ФБ типа Execute дополнительно есть вспомогательная переменная
   * \ref _sub_state типа uint32_t. Данная переменная обнуляется при сбросе 
   * блока и может использоваться для отслеживания процесса выполнения 
   * функционального блока. В примере переменная используется для организации 
   * задержки длиной в 2 цикла выполнения функционального блока.
   */
  class ExampleETrigA : public ETrigA
  {
  public:
    // Входные параметры 
    bool input_a; //!< Входной параметр a
    int  input_b; //!< Входной параметр b

    // Выходные параметры
    bool output_a() const; //!< Выходной параметр a
    int  output_b() const; //!< Выходной параметр b

  protected:
    //! Структура инициализации входных параметров блока
    struct Init
    {
      bool input_a = false; //!< Входной параметр a со значением по умолчанию
      int  input_b = 0;     //!< Входной параметр b со значением по умолчанию
    };

  public:
    /**
     * \brief Конструктор функционального блока
     * \param init Структура инициализации входных параметров блока
     * \details
     * При создании блока присваивает значения структуры инициализации входным
     * параметрам блока и значения по умолчанию для внутренних параметров.
     */
    ExampleETrigA(const Init& init);

  private:
    bool _input_a;  //!< Копируемый при запуске блока входной параметр a
    int  _input_b;  //!< Копируемый при запуске блока входной параметр b
    bool _output_a; //!< Значение выходного параметра a
    bool _output_b; //!< Значение выходного параметра b

    virtual FB_STATE processExecuting() override;
    virtual FB_STATE processAborting()  override;
    virtual FB_STATE processResetting() override;
  };
}